{-# OPTIONS --safe #-}
module Cubical.Categories.Comonad.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Categories.Category
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to funcId)
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.NaturalTransformation.More
open import Cubical.Categories.NaturalTransformation.Properties
open import Cubical.Categories.Functors.HomFunctor
open import Cubical.Categories.Constructions.BinProduct

private
  variable
    ‚Ñì ‚Ñì' : Level

module _ {C : Category ‚Ñì ‚Ñì'} (W : Functor C C) where
  open Category C
  open Functor
  open NatTrans

  record IsComonad : Type (‚Ñì-max ‚Ñì ‚Ñì') where
    field
      Œµ : NatTrans W (funcId C)
      Œ¥ : NatTrans W (funcComp W W)
      idl-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-rUnit {F = W} i)) ((Œµ ‚àòÀ° W) ‚àò·µõ Œ¥) (idTrans W)
      idr-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-lUnit {F = W} i)) ((W ‚àò ≥ Œµ) ‚àò·µõ Œ¥) (idTrans W)
      assoc-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-assoc {F = W} {G = W} {H = W} i))
                      ((W ‚àò ≥ Œ¥) ‚àò·µõ Œ¥)
                      ((Œ¥ ‚àòÀ° W) ‚àò·µõ Œ¥)

module _ (C : Category ‚Ñì ‚Ñì') where
  Comonad : Type (‚Ñì-max ‚Ñì ‚Ñì')
  Comonad = Œ£[ D ‚àà Functor C C ] IsComonad D

