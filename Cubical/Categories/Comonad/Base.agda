{-# OPTIONS --safe #-}
module Cubical.Categories.Comonad.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Categories.Category
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to funcId)
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.NaturalTransformation.More
open import Cubical.Categories.NaturalTransformation.Properties
open import Cubical.Categories.Functors.HomFunctor
open import Cubical.Categories.Constructions.BinProduct

private
  variable
    ‚Ñì ‚Ñì' : Level

module _ {C : Category ‚Ñì ‚Ñì'} (W : Functor C C) where
  open Category C
  open Functor
  open NatTrans

  record IsComonad : Type (‚Ñì-max ‚Ñì ‚Ñì') where
    field
      Œµ : NatTrans W (funcId C)
      Œ¥ : NatTrans W (funcComp W W)
      idl-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-rUnit {F = W} i)) ((Œµ ‚àòÀ° W) ‚àò·µõ Œ¥) (idTrans W)
      idr-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-lUnit {F = W} i)) ((W ‚àò ≥ Œµ) ‚àò·µõ Œ¥) (idTrans W)
      -- This is the obvious definition, but F-assoc is bad definitionally
      -- assoc-Œ¥ : PathP (Œª i ‚Üí NatTrans W (F-assoc {F = W} {G = W} {H = W} i))
      --                 ((W ‚àò ≥ Œ¥) ‚àò·µõ Œ¥)
      --                 ((Œ¥ ‚àòÀ° W) ‚àò·µõ Œ¥)
      assoc-Œ¥ : ‚àÄ {c} ‚Üí ((W ‚àò ≥ Œ¥) ‚àò·µõ Œ¥) ‚ü¶ c ‚üß ‚â° ((Œ¥ ‚àòÀ° W) ‚àò·µõ Œ¥) ‚ü¶ c ‚üß
    -- TODO: make this a NatTrans
    extend : ‚àÄ {c d} ‚Üí C [ W ‚üÖ c ‚üÜ , d ] ‚Üí C [ W ‚üÖ c ‚üÜ , W ‚üÖ d ‚üÜ ]
    extend f = W ‚ü™ f ‚ü´ ‚àò‚ü® C ‚ü© Œ¥ .N-ob _

    extend-Œµ : ‚àÄ {c} ‚Üí extend (Œµ ‚ü¶ c ‚üß) ‚â° id
    extend-Œµ = Œª i ‚Üí idr-Œ¥ i ‚ü¶ _ ‚üß
module _ (C : Category ‚Ñì ‚Ñì') where
  Comonad : Type (‚Ñì-max ‚Ñì ‚Ñì')
  Comonad = Œ£[ D ‚àà Functor C C ] IsComonad D

module _ {C : Category ‚Ñì ‚Ñì'} (coW coV : Comonad C) (ŒΩ : NatTrans (fst coW) (fst coV)) where

  private
    W V : Functor C C
    W = fst coW
    V = fst coV
    module W = IsComonad (snd coW)
    module V = IsComonad (snd coV)

  record IsComonadHom : Type (‚Ñì-max ‚Ñì ‚Ñì') where
    constructor proveComonadHom
    field
      V-Œµ : V.Œµ ‚àò·µõ ŒΩ ‚â° W.Œµ
      V-Œ¥ : V.Œ¥ ‚àò·µõ ŒΩ ‚â° (ŒΩ ‚àò ∞ ŒΩ) ‚àò·µõ W.Œ¥
  open IsComonadHom

  isProp-IsComnadHom : isProp (IsComonadHom)
  isProp-IsComnadHom ŒΩ ŒΩ' i .V-Œµ = isSetNatTrans _ _ (ŒΩ .V-Œµ) (ŒΩ' .V-Œµ) i
  isProp-IsComnadHom ŒΩ ŒΩ' i .V-Œ¥ = isSetNatTrans _ _ (ŒΩ .V-Œ¥) (ŒΩ' .V-Œ¥) i

module _ {C : Category ‚Ñì ‚Ñì'} (comonadW comonadV : Comonad C) where
  ComonadHom : Type (‚Ñì-max ‚Ñì ‚Ñì')
  ComonadHom = Œ£[ ŒΩ ‚àà NatTrans (fst comonadW) (fst comonadV) ] IsComonadHom comonadW comonadV ŒΩ
