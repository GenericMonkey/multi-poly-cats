{-
   Monads as extension systems, i.e., in terms of unit and bind, deriving the rest of the structure
   https://ncatlab.org/nlab/show/extension+system
-}
{-# OPTIONS --safe #-}
module Cubical.Categories.Monad.ExtensionSystem where

open import Cubical.Foundations.Prelude
open import Cubical.Categories.Category
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to funcId)
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.NaturalTransformation.Properties
open import Cubical.Categories.Functors.HomFunctor
open import Cubical.Categories.Constructions.BinProduct

private
  variable
    ‚Ñì ‚Ñì' : Level

module _ (C : Category ‚Ñì ‚Ñì') where
  open Category
  private
    variable
      a b c : C .ob
      f g h : C [ a , b ]

  record ExtensionSystem (T : C .ob ‚Üí C .ob) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
    field
      Œ∑ : C [ a , T a ]
      bind : C [ a , T b ] ‚Üí C [ T a , T b ]
      bind-r : bind (Œ∑ {a = a}) ‚â° C .id
      bind-l : bind f ‚àò‚ü® C ‚ü© Œ∑ ‚â° f
      bind-comp : bind f ‚àò‚ü® C ‚ü© bind g ‚â° bind (bind f ‚àò‚ü® C ‚ü© g)

  module _ {T} (E : ExtensionSystem T) where
    open ExtensionSystem E
    Kleisli : Category _ _
    Kleisli .ob = C .ob
    Kleisli .Hom[_,_] a b = C [ a , T b ]
    Kleisli .id = Œ∑
    Kleisli ._‚ãÜ_ f g = bind g ‚àò‚ü® C ‚ü© f
    Kleisli .‚ãÜIdL f = bind-l
    Kleisli .‚ãÜIdR f = cong‚ÇÇ (comp' C) bind-r refl ‚àô C .‚ãÜIdR f
    Kleisli .‚ãÜAssoc f g h = C .‚ãÜAssoc _ _ _ ‚àô cong‚ÇÇ (comp' C) bind-comp refl
    Kleisli .isSetHom = C .isSetHom

    open Functor
    G : Functor Kleisli C
    G .F-ob = T
    G .F-hom = bind
    G .F-id = bind-r
    G .F-seq f g = sym bind-comp

    open import Cubical.Categories.Adjoint.UniversalElements
    open import Cubical.Categories.Presheaf.Representable
    open UnivElt
    open isUniversal
    F : LeftAdjoint _ _ G
    F c .vertex = c
    F c .element = Œ∑
    F c .universal .coinduction = Œª z ‚Üí z
    F c .universal .commutes œï = bind-l
    F c .universal .is-uniq œï f p = sym bind-l ‚àô p

    -- TODO: by abstract nonsense construct a monad structure for T
